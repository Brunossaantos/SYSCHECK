/*
	Script de criação do banco de dados SYSCHECK
	Autor: Danilo Franco
	Data: 20/10/2023
*/

CREATE DATABASE IF NOT EXISTS SYSCHECK;
USE SYSCHECK;

/*
	Criação das tabelas do banco de dados SYSCHECK
	Autor: Danilo Franco
	Data: 20/10/2023
*/

CREATE TABLE IF NOT EXISTS TBL_ERROS(
	ID_ERRO INT PRIMARY KEY AUTO_INCREMENT,
	ERRO TEXT NOT NULL,
	ARQUIVO TEXT NOT NULL,
	LINHA TEXT NOT NULL,
	LOCAL TEXT NOT NULL,
	DATA_HORA VARCHAR(30) NOT NULL,
	FK_USUARIO INT NOT NULL
);

CREATE TABLE IF NOT EXISTS TBL_TIPOS_CHECKLIST(
	ID_TIPO_CHECKLIST INT PRIMARY KEY AUTO_INCREMENT,
	DESCRICAO_TIPO_CHECKLIST VARCHAR(40) NOT NULL,
	STATUS_TIPO_CHECKLIST INT NOT NULL
);

CREATE TABLE IF NOT EXISTS TBL_ETAPAS_CHECKLISTS(
	ID_ETAPA_CHECKLIST INT PRIMARY KEY AUTO_INCREMENT,
	FK_TIPO_CHECKLIST INT NOT NULL,
	TITULO_ETAPA VARCHAR(30) NOT NULL,
	CONTEUDO_ETAPA TEXT NOT NULL,
	NUMERO_ETAPA INT NOT NULL,
	FOTO_OBRIGATORIA INT NOT NULL,
	CAMPO_ADICIONAL INT NOT NULL,
	STATUS_ETAPA INT NOT NULL
);

CREATE TABLE IF NOT EXISTS TBL_OBJETOS(
	ID_OBJETO INT PRIMARY KEY AUTO_INCREMENT,
	DESCRICAO_OBJETO VARCHAR(50) NOT NULL,
	FK_TIPO_CHECKLIST INT NOT NULL
	STATUS_OBJETO INT NOT NULL
);


CREATE TABLE IF NOT EXISTS TBL_USUARIOS(
	ID_USUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	DEPARTAMENTO INT,
	CARGO INT,
	NOME_USUARIO VARCHAR(30),
	SENHA TEXT,
	STATUS_USUARIO INT
);

CREATE TABLE IF NOT EXISTS TBL_CHECKLISTS(
	ID_CHECKLIST INT PRIMARY KEY AUTO_INCREMENT;
	FK_USUARIO INT NOT NULL,
	FK_TIPO INT NOT NULL,
	FK_OBJETO INT NOT NULL,
	DATA_INICIO VARCHAR(30),
	DATA_FIM VARCHAR(30),
	STATUS_CHECKLIST INT DEFAULT 0
);

CREATE TABLE IF NOT EXISTS TBL_ETAPAS_REALIZADAS(
	ID_ETAPA_REALIZADA INT PRIMARY KEY AUTO_INCREMENT,
	FK_CHECKLIST INT NOT NULL,
	FK_ETAPA INT NOT NULL,
	NUMERO_ETAPA INT NOT NULL,
	ACAO INT NOT NULL,
	OBSERVACAO TEXT
);

CREATE TABLE IF NOT EXISTS TBL_FOTOS(
	ID_FOTO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_CHECKLIST INT NOT NULL, 
	NUMERO_ETAPA INT NOT NULL,
	CAMINHO_IMAGEM TEXT
);

CREATE TABLE IF NOT EXISTS TBL_DEPARTAMENTOS(
	ID_DEPARTAMENTO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	DESCRICAO_DEPARTAMENTO VARCHAR(30) NOT NULL,
	STATUS_DEPARTAMENTO INT NOT NULL
);

CREATE TABLE IF NOT EXISTS TBL_HORIMETRO(
	ID_HORIMETRO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_CHECKLIST INT NOT NULL,
	FK_EQUIPAMENTO INT NOT NULL,
	HORIMETRO INT NOT NULL
);

CREATE TABLE IF NOT EXISTS TBL_RESPONSAVEIS(
	ID_RESPONSAVEL INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	NOME_RESPONSAVEL VARCHAR(50) NOT NULL,
	EMAIL_RESPONSAVEL VARCHAR(50) NOT NULL
);

/*ARMAZENAMENOT DOS TIPOS DE EMPILHADEIRAS 
	EMPILHADEIRA A GÁS
	EMPILHADEIRA DE BATERIA COMUM
	EMPILHADEIRA DE BATERIA DE LÍTIO
*/
CREATE TABLE IF NOT EXISTS TBL_TIPOS_EMPILHADEIRAS(
	ID_TIPO_EMPILHADEIRA INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	DESC_TIPO_EMPILHADEIRA VARCHAR(50) NOT NULL
);

/*RELACIONAMENTO DOS TIPOS E CHECKLIST COM OS TIPOS DE EMPILHADEIRAS
	TCKL = TIPO CHECKLIST
	TMP = TIPO EMPILHADEIRA
*/
CREATE TABLE IF NOT EXISTS TBL_TPC_TPEMP(
	ID_TCTE INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_TCKL INT NOT NULL,
	FK_TEMP INT NOT NULL
);


CREATE TABLE IF NOT EXISTS TBL_BATERIAS(
	ID_BATERIA INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	NUMERO_BATERIA INT NOT NULL UNIQUE, 
	DESCRICAO_BATERIA VARCHAR(50),
	MEDIDAS VARCHAR(50),
	OBSERVACAO VARCHAR(50)
);

/*RELACIONAMENTO DA BATERIA COM A EMPILHADEIRA NO CHECKLIST*/
CREATE TABLE IF NOT EXISTS TBL_EMPILHADEIRA_BATERIA(
	ID_EMPILHADEIRA_BATERIA INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_CHECKLIST INT NOT NULL,
	FK_EMPILHADEIRA INT NOT NULL,
	FK_BATERIA INT NOT NULL,
	NIVEL_BATERIA INT NOT NULL,
	DATA_HORA VARCHAR(30) NOT NULL

);

CREATE TABLE IF NOT EXISTS TBL_USUARIO_EMPILHADEIRA(
	ID_USUARIO_EMPILHADEIRA INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_CHECKLIST INT NOT NULL,
	FK_USUARIO INT NOT NULL,
	FK_EMPILHADEIRA INT NOT NULL,
	DATA_HORA_INICIO VARCHAR(30),
	DATA_HORA_ENCERRAMENTO VARCHAR(30)
);

CREATE TABLE IF NOT EXISTS TBL_CHAMADOS(
	ID_CHAMADO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_ITEM_CHAMADO INT NOT NULL,
	DESCRICAO_CHAMADO TEXT,
	DATA_ABERTURA_CHAMADO VARCHAR(30),
	DATA_FINALIZACAO_CHAMAOD VARCHAR(30),
	FK_USUARIO INT NOT NULL,
	STATUS_CHAMADO INT NOT NULL DEFAULT 0
);

CREATE TABE

CREATE TABLE IF NOT EXISTS TBL_FOTOS_CHAMADOS(
	ID_FOTO_CHAMADO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_CHAMADO INT NOT NULL,
	CAMINHO_IMAGEM VARCHAR(150)
);

CREATE TABLE IF NOT EXISTS TBL_FOLLOW_UP_CHAMADOS(
	ID_FOLLOW_UP INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_CHAMADO INT NOT NULL,
	FK_USUARIO INT NOT NULL,
	FOLLOW_UP TEXT,
	DATA_HORA VARCHAR(30)
);

CREATE TABLE IF NOT EXISTS TBL_PERIFERICOS_BATERIAS(
	ID_PERIFERICO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	TIPO_PERIFERICO INT NOT NULL,
	DESCRICAO_PERIFERICO VARCHAR(30),
	STATUS_PERIFERICO INT NOT NULL
);

CREATE TABLE IF NOT EXISTS TBL_CARGA_BATERIA_COMUM(
	ID_CARGA_BATERIA INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_CHECKLIST INT NOT NULL,
	FK_EMPILHADEIRA INT NOT NULL,
	NIVEL_BATERIA INT NOT NULL,
	DATA_HORA VARCHAR(30)
);

CREATE TABLE IF NOT EXISTS TBL_LISTA_USO_VEICULO(
	ID_USO_VEICULO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_USUARIO INT NOT NULL,
	FK_VEICULO INT NOT NULL,
	DATA_HORA VARCHAR(30),
	DATA_HORA_DEVOLUCAO VARCHAR(30),
	STATUS_USO INT NOT NULL
);

CREATE TABLE IF NOT EXISTS TBL_LOG_FINALIZACAO_HORIMETRO(
	ID_FINALIZACAO INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_CHECKLIST INT NOT NULL,
	FK_EMPILHADEIRA INT NOT NULL,
	FK_LIDER INT NOT NULL,
	DATA_FINALIZACAO_HORIMETRO VARCHAR(30) NOT NULL
);

CREATE TABLE IF NOT EXISTS TBL_LOCAIS(
	ID_LOCAL INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	DESCRICAO_LOCAL VARCHAR(50) NOT NULL,
	STATUS_LOCAL INT NOT NULL
);

CREATE TABLE IF NOT EXISTS TBL_EQUIPAMENTOS_LOCAL(
	ID_EQUIPAMENTO_LOCAL INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FK_LOCAL INT NOT NULL,
	FK_EQUIPAMENTO INT NOT NULL
);

/*ADICIONANDO AS REGRAS DE RESTRIÇÃO DE CHAVE ESTRANGEIRA*/

/*chaves estrangeiras*/
ALTER TABLE TBL_ERROS
ADD CONSTRAINT FK_ERROS_USUARIO
FOREIGN KEY (FK_USUARIO) REFERENCES TBL_USUARIOS(ID_USUARIO);

ALTER TABLE TBL_ETAPAS_CHECKLISTS
ADD CONSTRAINT FK_TIPO_CHECKLIST_ETAPAS
FOREIGN KEY (FK_TIPO_CHECKLIST) REFERENCES TBL_TIPOS_CHECKLIST(ID_TIPO_CHECKLIST);

ALTER TABLE TBL_OBJETOS
ADD CONSTRAINT FK_TIPO_OBJETO
FOREIGN KEY (FK_TIPO_CHECKLIST) REFERENCES TBL_TIPOS_CHECKLIST(ID_TIPO_CHECKLIST);

ALTER TABLE TBL_CHECKLISTS
ADD CONSTRAINT FK_CHECKLIST_USUARIO
FOREIGN KEY (FK_USUARIO) REFERENCES TBL_USUARIOS(ID_USUARIO);

ALTER TABLE TBL_CHECKLISTS
ADD CONSTRAINT FK_CHECKLIST_TIPO
FOREIGN KEY (FK_TIPO) REFERENCES TBL_TIPOS_CHECKLIST(ID_TIPO_CHECKLIST);

ALTER TABLE TBL_CHECKLISTS
ADD CONSTRAINT FK_CHECKLIST
FOREIGN KEY (FK_OBJETO) REFERENCES TBL_OBJETOS(ID_OBJETO);

ALTER TABLE TBL_ETAPAS_REALIZADAS
ADD CONSTRAINT FK_ETAPAS_REALIZADAS_CHECKLIST
FOREIGN KEY (FK_CHECKLIST) REFERENCES TBL_CHECKLISTS(ID_CHECKLIST);

ALTER TABLE TBL_ETAPAS_RALIZADAS
ADD CONSTRAINT FK_ETAPA_REALIZADA_ETAPA
FOREIGN KEY (FK_ETAPA) REFERENCES TBL_ETAPAS_CHECKLISTS(ID_ETAPA_CHECKLIST);

ALTER TABLE TBL_FOTOS
ADD CONSTRAINT FK_CHECKLIST_FOTO
FOREIGN KEY (FK_CHECKLIST) REFERENCES TBL_CHECKLISTS(ID_CHECKLIST);

ALTER TABLE TBL_HORIMETRO
ADD CONSTRAINT FK_EQUIPAMENTO_HORIMETRO
FOREIGN KEY (FK_EQUIPAMENTO) REFERENCES TBL_OBJETOS(ID_OBJETO);

ALTER TABLE TBL_TIPOS_CHECKLIST
ADD CONSTRAINT FK_RESPONSAVEL_TIPO
FOREIGN KEY (FK_RESPONSAVEL) REFERENCES TBL_RESPONSAVEIS(ID_RESPONSAVEL);

ALTER TABLE TBL_TPC_TPEMP
ADD CONSTRAINT FK_TIPO_CHECKLIST_TIPO_EMPILHADEIRA
FOREIGN KEY (FK_TCKL) REFERENCES TBL_TIPOS_CHECKLIST(ID_TIPO_CHECKLIST),
ADD CONSTRAINT FK_TIPO_EMPILHADEIRA
FOREIGN KEY (FK_TEMP) REFERENCES TBL_TIPOS_EMPILHADEIRAS(ID_TIPO_EMPILHADEIRA);

ALTER TABLE TBL_EMPILHADEIRA_BATERIA
ADD CONSTRAINT FK_CHECKLIST_EMPILHADEIRA
FOREIGN KEY (FK_CHECKLIST) REFERENCES TBL_CHECKLISTS(ID_CHECKLIST),
ADD CONSTRAINT FK_EMPILHADEIRA
FOREIGN KEY (FK_EMPILHADEIRA) REFERENCES TBL_OBJETOS(ID_OBJETO),
ADD CONSTRAINT FK_BATERIA
FOREIGN KEY (FK_BATERIA) REFERENCES TBL_BATERIAS(ID_BATERIA);

ALTER TABLE TBL_USUARIO_EMPILHADEIRA
ADD CONSTRAINT FK_USUARIO_EMPILHADEIRA_USO
FOREIGN KEY (FK_USUARIO) REFERENCES TBL_USUARIOS(ID_USUARIO),
ADD CONSTRAINT FK_EMPILHADEIRA_USUARIO_USO
FOREIGN KEY (FK_EMPILHADEIRA) REFERENCES TBL_OBJETOS(ID_OBJETO),
ADD CONSTRAINT FK_CHECKLIST_USUARIO_USO
FOREIGN KEY (FK_CHECKLIST) REFERENCES TBL_CHECKLISTS(ID_CHECKLIST);

ALTER TABLE TBL_HORIMETRO
ADD CONSTRAINT FK_EQUIPAMENTO_CHECKLIST
FOREIGN KEY (FK_CHECKLIST) REFERENCES TBL_CHECKLISTS(ID_CHECKLIST);

ALTER TABLE TBL_CHAMADOS
ADD CONSTRAINT FK_ITEM_CHAMADO
FOREIGN KEY (FK_ITEM_CHAMADO) REFERENCES TBL_PERIFERICOS_BATERIAS(ID_PERIFERICO);

ALTER TABLE TBL_CHAMADOS
ADD CONSTRAINT FK_USUARIO_CHAMADO
FOREIGN KEY (FK_USUARIO) REFERENCES TBL_USUARIOS(ID_USUARIO);

ALTER TABLE TBL_FOTOS_CHAMADOS
ADD CONSTRAINT FK_FOTO_CHAMADO
FOREIGN KEY (FK_CHAMADO) REFERENCES TBL_CHAMADOS(ID_CHAMADO);

ALTER TABLE TBL_CARGA_BATERIA_COMUM
ADD CONSTRAINT FK_CHECKLIST_BATERIA_COMUM
FOREIGN KEY (FK_CHECKLIST) REFERENCES TBL_CHECKLISTS(ID_CHECKLIST);

ALTER TABLE TBL_CARGA_BATERIA_COMUM
ADD CONSTRAINT FK_EMPILHADEIRA_BATERIA_COMUM
FOREIGN KEY (FK_EMPILHADEIRA) REFERENCES TBL_OBJETOS(ID_OBJETO);

ALTER TABLE TBL_LISTA_USO_VEICULO
ADD CONSTRAINT FK_USUARIO_VEICULO
FOREIGN KEY (FK_USUARIO) REFERENCES TBL_USUARIOS(ID_USUARIO);

ALTER TABLE TBL_LISTA_USO_VEICULO
ADD CONSTRAINT FK_VEICULO_OBJETO
FOREIGN KEY (FK_VEICULO) REFERENCES TBL_OBJETOS(ID_OBJETO);

ALTER TABLE TBL_LOG_FINALIZACAO_HORIMETRO
ADD CONSTRAINT FK_LOG_CHECKLIST
FOREIGN KEY (FK_CHECKLIST) REFERENCES TBL_CHECKLISTS(ID_CHECKLIST),
ADD CONSTRAINT FK_LOG_EMPILHADEIRA
FOREIGN KEY (FK_EMPILHADEIRA) REFERENCES TBL_OBJETOS(ID_OBJETO),
ADD CONSTRAINT FK_LIDER_LOG
FOREIGN KEY (FK_LIDER) REFERENCES TBL_USUARIOS(ID_USUARIO);

ALTER TABLE TBL_FOTOS_CHAMADOS
ADD CONSTRAINT FK_CHAMADO_ITEM
FOREIGN KEY (FK_ITEM_CHAMADO) REFERENCES TBL_OBJETOS(ID_OBJETO),
ADD CONSTRAINT FK_CHAMADO_USUARIO
FOREIGN KEY (FK_USUARIO) REFERENCES TBL_USUARIOS(ID_USUARIO);

ALTER TABLE TBL_FOLLOW_UP_CHAMADOS
ADD CONSTRAINT FK_CHAMADO_FOLLOW_UP
FOREIGN KEY (FK_CHAMADO) REFERENCES TBL_CHAMADOS(ID_CHAMADO),
ADD CONSTRAINT FK_USUARIO_FOLLOW_UP
FOREIGN KEY (FK_USUARIO) REFERENCES TBL_USUARIOS(ID_USUARIO);

ALTER TABLE TBL_EQUIPAMENTOS_LOCAL
ADD CONSTRAINT FK_EQUIPAMENTO_LOCAL
FOREIGN KEY (FK_EQUIPAMENTO) REFERENCES TBL_OBJETOS(ID_OBJETO),
ADD CONSTRAINT FK_LOCAL_EQUIPAMENTO
FOREIGN KEY (FK_LOCAL) REFERENCES TBL_LOCAIS(ID_LOCAL);

/*criação das views de supoerte*/
CREATE VIEW v_checklist_conteudo_etapas AS
SELECT REL.ID_ETAPA_REALIZADA, REL.FK_CHECKLIST, ETP.CONTEUDO_ETAPA, REL.NUMERO_ETAPA, REL.ACAO, REL.OBSERVACAO 
FROM TBL_ETAPAS_REALIZADAS REL
INNER JOIN TBL_ETAPAS_CHECKLISTS ETP ON REL.FK_ETAPA = ETP.ID_ETAPA_CHECKLIST
ORDER BY FK_CHECKLIST ASC, NUMERO_ETAPA ASC;

/*criação da view de checklist por usuario*/
CREATE VIEW v_checklist_visao_geral AS
SELECT C.ID_CHECKLIST AS NUMERO_CHECKLIST, U.NOME AS USUARIO, T.DESCRICAO_TIPO_CHECKLIST AS TIPO, O.DESCRICAO_OBJETO AS OBJETO, C.DATA_INICIO, C.DATA_FIM, C.STATUS_CHECKLIST
FROM TBL_CHECKLISTS C
INNER JOIN TBL_USUARIOS U ON C.FK_USUARIO = U.ID_USUARIO
INNER JOIN TBL_TIPOS_CHECKLIST T ON C.FK_TIPO = T.ID_TIPO_CHECKLIST
INNER JOIN TBL_OBJETOS O ON C.FK_OBJETO = O.ID_OBJETO

/*criação da view de horimetro de empilhadeiras*/
CREATE VIEW V_CHECKLIST_HORIMETRO AS
SELECT 
    c.ID_CHECKLIST,
    c.FK_USUARIO,
    c.FK_TIPO,
    c.FK_OBJETO,
    c.DATA_INICIO,
    c.DATA_FIM,
    c.STATUS_CHECKLIST,
    MIN(h.HORIMETRO) AS HORIMETRO_INICIAL,
    CASE 
        WHEN COUNT(h.ID_HORIMETRO) > 1 THEN MAX(h.HORIMETRO)
        ELSE NULL
    END AS HORIMETRO_FINAL
FROM TBL_CHECKLISTS c
LEFT JOIN TBL_HORIMETRO h ON c.ID_CHECKLIST = h.FK_CHECKLIST
WHERE c.ID_CHECKLIST > 600 AND c.FK_TIPO IN (3, 4, 14) /*Tipo de checklist refete as empilhadeiras*/
GROUP BY c.ID_CHECKLIST, c.FK_USUARIO, c.FK_TIPO, c.FK_OBJETO, c.DATA_INICIO, c.DATA_FIM, c.STATUS_CHECKLIST;


/*Inclusão do campo de responsável na TBL_TIPOS*/
ALTER TABLE TBL_TIPOS_CHECKLIST
ADD FK_RESPONSAVEL INT NOT NULL AFTER DESCRICAO_TIPO_CHECKLIST;

/*Limpeza dos dados de teste
	usuaroio 3 = Danilo Franco
	usuario 1= Sistema
*/
DELETE FROM TBL_ETAPAS_REALIZADAS WHERE FK_CHECKLIST IN (SELECT ID_CHECKLIST FROM TBL_CHECKLISTS WHERE FK_USUARIO = 3);
DELETE FROM TBL_FOTOS WHERE FK_CHECKLIST IN (SELECT ID_CHECKLIST FROM TBL_CHECKLISTS WHERE FK_USUARIO = 3);
DELETE FROM TBL_HORIMETRO WHERE FK_CHECKLIST IN (SELECT ID_CHECKLIST FROM TBL_CHECKLISTS WHERE FK_USUARIO = 3);
DELETE FROM TBL_CHECKLISTS WHERE FK_USUARIO = 3

/*consulta para verificar os checklist abertos*/
SELECT ID_CHECKLIST AS NUMERO_CHECKLIST, NOME, DATA_INICIO, DESCRICAO_OBJETO 
FROM TBL_CHECKLISTS C
INNER JOIN TBL_USUARIOS U ON C.FK_USUARIO = U.ID_USUARIO
INNER JOIN TBL_OBJETOS O ON C.FK_OBJETO = O.ID_OBJETO
WHERE C.STATUS_CHECKLIST = 1

/*consulta para verificar os checklist abertos por usuario*/
SELECT U.NOME, C.FK_USUARIO AS ID_USUARIO, COUNT(C.ID_CHECKLIST) AS QTD_CHECKLISTS_ABERTO 
FROM TBL_CHECKLISTS C
INNER JOIN TBL_USUARIOS U ON C.FK_USUARIO = U.ID_USUARIO
WHERE STATUS_CHECKLIST = 1
GROUP BY NOME
ORDER BY QTD_CHECKLISTS_ABERTO DESC

/*consulta para verificar os checklist abertos por usuario e tipo de checklist*/
SELECT * FROM TBL_CHECKLISTS WHERE FK_USUARIO IN (5, 4, 15, 25, 20, 27) AND STATUS_CHECKLIST = 1 ORDER BY ID_CHECKLIST DESC;

/*update para finalizar os checklist abertos por usuario e tipo de checklist*/
UPDATE TBL_CHECKLISTS SET STATUS_CHECKLIST = 3, DATA_FIM = DATA_INICIO WHERE FK_USUARIO IN (5, 4, 15, 25, 20, 27) AND STATUS_CHECKLIST = 1;

/*consulta para verificar os checklist abertos por usuario e tipo de checklist com o nome do usuario
	3, 4, 14 = EMPILHADEIRAS
*/
SELECT DESCRICAO_OBJETO FROM TBL_OBJETOS WHERE FK_TIPO_CHECKLIST IN (3, 4, 14);